input {
    beats {
        # host => "0.0.0.0"
        port => 5044
    }
}

filter {
    # Suppression de la ligne d'entête
    if [decoded][csv][0] == "Nom" or [decoded][csv][0] == "0" {
        drop { }
    }

    # Supression des valeurs par défaut '0'
    alter {
        condrewrite => [
            "[decoded][csv][1]", "0", "",
            "[decoded][csv][2]", "0", "",
            "[decoded][csv][3]", "0", "",
            "[decoded][csv][7]", "0", "",
            "[decoded][csv][8]", "0", "",
            "[decoded][csv][9]", "0", "",
            "[decoded][csv][10]", "0", "",
            "[decoded][csv][11]", "0", "",
            "[decoded][csv][12]", "0", "",
            "[decoded][csv][13]", "0", "",
            "[decoded][csv][14]", "0", "",
            "[decoded][csv][15]", "0", "",
            "[decoded][csv][16]", "0", "",
            "[decoded][csv][17]", "0", "",
            "[decoded][csv][18]", "0", "",
            "[decoded][csv][19]", "0", "",
            "[decoded][csv][20]", "0", ""
        ]
    }
    
    mutate {

        add_field => { 
            "[project][name]" => "%{[decoded][csv][0]}"
            "[project][client]" => "%{[decoded][csv][1]}"
            "[project][creation_date]" => "%{[decoded][csv][2]}"
            "[project][created_by]" => "%{[decoded][csv][3]}"
            "[project][activity][tma]" => "%{[decoded][csv][4]}"
            "[project][activity][projects]" => "%{[decoded][csv][5]}"
            "[project][activity][at]" => "%{[decoded][csv][6]}"
            "[project][activity][total]" => "%{[decoded][csv][7]}"
            "[project][automation][future_plateform]" => "%{[decoded][csv][19]}"
         }
    }
    mutate {
        convert => {
          "[project][activity][tma]" => "integer"
          "[project][activity][projects]" => "integer"
          "[project][activity][at]" => "integer"
          "[project][activity][total]" => "integer"
        }
    }

    fingerprint {
        source => ["[project][name]"]
        target => "fingerprint"
        key => "78787878"
        method => "SHA1"
        concatenate_sources => true
    }

    #
    # Structured datas
    #
   
    # Languages de développement
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][8]"
            target => "[project][development][languages]"
        }
    }

    # Frameworks
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][9]"
            target => "[project][development][frameworks][java]"
        }
    }
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][10]"
            target => "[project][development][frameworks][php]"
        }
    }
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][11]"
            target => "[project][development][frameworks][js]"
        }
    }

    # Middlewares
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][12]"
            target => "[project][development][middlewares]"
        }
    }

    # Databases
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][13]"
            target => "[project][development][databases]"
        }
    }

    # Others
    ruby {
        path => "/usr/share/logstash/filters/list_technos.rb"
        script_params => {
            source => "[decoded][csv][14]"
            target => "[project][development][others]"
        }
    }

    # Sources

    grok {
        match => { 
            "[decoded][csv][15]" => [
                "(?<[project][development][sources][type]>[^(:]+) \((?<[project][development][sources][owner]>[^(:]+)\) : %{URI:[project][development][sources][link]}",
                "(?<[project][development][sources][type]>[^(:]+) \((?<[project][development][sources][owner]>[^(:]+)\)"
            ]
        }
        overwrite => [ "[project][development][sources]" ]
        keep_empty_captures => true
        tag_on_failure => [ "_sources_grokparsefailure"]
    }

    # CI-CD platform

    grok {
        match => { 
            "[decoded][csv][16]" => [
                "(?<[project][automation][platform][type]>[^(:]+) \((?<[project][automation][platform][owner]>[^)]+)\) : %{URI:[project][automation][platform][link]}",
                "(?<[project][automation][platform][type]>[^(:]+) \((?<[project][automation][platform][owner]>[^)]+)\)"
            ] 
        }
        overwrite => [ "[project][automation][platform]" ]
        keep_empty_captures => true
        tag_on_failure => [ "_automation_platform_grokparsefailure"]
    }

    # CI-CD steps

    ruby {
        code => "event.set('[project][automation][steps]', event.get('[decoded][csv][17]').split(',', -1).map { |v| v.strip  })"
    }

    # Bundles
    ruby {
        code => "event.set('[project][automation][bundles]', event.get('[decoded][csv][18]').split(',', -1).map { |v| v.strip  })"
    }

    # Environments
    ruby {
        path => "/usr/share/logstash/filters/list_envs.rb"
        script_params => {
            source => "[decoded][csv][20]"
            target => "[project][environments]"
            delimiter => "{EOL}"
        }
    }
}

output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "projets-datas"
        manage_template => true
        document_id => "%{fingerprint}"
        doc_as_upsert => true
    }
    stdout { codec => rubydebug }
}
